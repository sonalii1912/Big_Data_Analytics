# -*- coding: utf-8 -*-
"""multivariate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HbFjErUP8fatU3YdrPQZbW0KPDLMBxRV
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D

dataset = pd.read_csv('50_Startups.csv')
dataset.head()

dataset.isna().sum()

dataset.describe()

X = dataset.drop('Profit', axis=1)
X.head()

y = dataset['Profit']
y.head()

import seaborn as sns
dataset_numeric = dataset.drop(columns=['State'])
# Correlation Analysis
correlation_matrix = dataset_numeric.corr()
# Visualize the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

categorical_feature = ["State"]
one_hot = OneHotEncoder()
transformer = ColumnTransformer([("one_hot",
                                  one_hot,
                                  categorical_feature)],
                                 remainder="passthrough")

transformed_X = transformer.fit_transform(X)

pd.DataFrame(transformed_X).head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(transformed_X, y, test_size = 0.25, random_state = 2509)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

regressor.score(X_test,y_test)

y_pred = regressor.predict(X_test)

d = {'y_pred': y_pred, 'y_test': y_test}

pd.DataFrame(d)

# Convert DataFrame columns to NumPy arrays for plotting
x_rd_spend = X_test[:, 0]  # Assuming 'R&D Spend' is the first column in X_test
x_administration = X_test[:, 1]  # Assuming 'Administration' is the second column in X_test
y_actual = y_test
y_predicted = y_pred

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

# Plot actual data points
ax.scatter(x_rd_spend, x_administration, y_actual, color='r', label='Actual')

# Plot predicted data points
ax.scatter(x_rd_spend, x_administration, y_predicted, color='g', label='Predicted')

# Plot the regression plane
xx, yy = np.meshgrid(np.linspace(x_rd_spend.min(), x_rd_spend.max(), 10),
                     np.linspace(x_administration.min(), x_administration.max(), 10))
zz = regressor.coef_[0] * xx + regressor.coef_[1] * yy + regressor.intercept_

#ax.plot_surface(xx, yy, zz, alpha=0.5, color='b')

ax.plot_trisurf(xx.flatten(), yy.flatten(), zz.flatten(), alpha=0.5, color='b')

# Set labels and legend

ax.set_xlabel('R&D Spend')
ax.set_ylabel('Administration')
ax.set_zlabel('Profit')
ax.legend()

plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


# Exclude the 'State' column for visualization
dataset_numeric = dataset.drop(columns=['State'])

# Pairplot
sns.pairplot(dataset_numeric)
plt.title("Pairplot of Numerical Variables")
plt.show()

# Histograms
dataset_numeric.hist(figsize=(10, 6))
plt.suptitle("Histograms of Numerical Variables", y=1.02)
plt.show()

# Boxplots
plt.figure(figsize=(10, 6))
sns.boxplot(data=dataset_numeric)
plt.title("Boxplots of Numerical Variables")
plt.show()

# Scatterplot
sns.pairplot(dataset_numeric, kind='scatter')
plt.title("Scatterplot of Numerical Variables")
plt.show()

# Bar plot (mean by State)
plt.figure(figsize=(10, 6))
sns.barplot(x='State', y='Profit', data=dataset)
plt.title("Mean Profit by State")
plt.show()

